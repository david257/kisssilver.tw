<?php
namespace app\controller;

use app\models\Coupon;
use app\models\CreditLog;
use app\models\Customer as CustModel;
use app\models\CustomerAddress;
use think\Exception;
use think\facade\Db;
use think\facade\Session;
use think\facade\View;

class Customer extends AuthBase
{

    private $pageSize  =20;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function credits()
    {
        $data["customer"] = $this->getCustomerInfo();
        $query = Db::name(CreditLog::$tablename)->where("customerid", $this->getCustomerId())->order("clogid DESC")->paginate($this->pageSize);
        $data["list"] = $query->all();
        $data["pages"] = \app\extend\Page::make($query->currentPage(),$query->lastPage());
        View::assign($data);
        return View::fetch();
    }

    public function coupons()
    {
        $query = Db::name(Coupon::$tablename)->where("customerid", $this->getCustomerId())->order("cpid DESC")->paginate($this->pageSize);
        $data["list"] = $query->all();
        $data["pages"] = \app\extend\Page::make($query->currentPage(),$query->lastPage());
        View::assign($data);
        return View::fetch();
    }

    public function profile()
    {
        $customer = $this->getCustomerInfo();
        if(empty($customer)) {
            header("location:".front_link("Login/index"));exit;
        }
        $data["customer"] = $customer;
        $data["customer_addresses"] = CustomerAddress::getall($this->getCustomerId());
        View::assign($data);
        return View::fetch("profile");
    }

    public function updatePasswd()
    {
        if(request()->isAjax()) {
            try {
                $old_passwd = input("old_passwd");
                $new_passwd = input("new_passwd");
                $new_passwd2 = input("new_passwd2");
                if (empty($old_passwd)) {
                    throw new Exception("請輸入舊密碼");
                }

                $customer = $this->getCustomerInfo();
                if (md5($old_passwd) != $customer["custpassword"]) {
                    throw new Exception("舊密碼不正確");
                }

                if (empty($new_passwd)) {
                    throw new Exception("新密碼不能為空");
                }

                if ($new_passwd != $new_passwd2) {
                    throw new Exception("兩次密碼不一致");
                }

                if (false === Db::name(CustModel::$tablename)->where("customerid", $this->getCustomerId())->update(["custpassword" => md5($new_passwd), "update_at" => time()])) {
                    throw new Exception("變更密碼失敗");
                }

                toJSON([
                    "code" => 0,
                    "msg" => "密碼變更成功,請重新登入",
                    "url" => front_link("Login/index")
                ]);
            } catch (Exception $ex) {
                toJSON([
                    "code" => 1,
                    "msg" => $ex->getMessage()
                ]);
            }
        }
        return View::fetch("edit_passwd");
    }

    /**
     * update customer profile
     * @throws \think\db\exception\DbException
     */
    public function edit()
    {
        $fullname = input("fullname");
        $birth_year = (int) input("birth_year");
        $birth_month = (int) input("birth_month");
        $birth_day = (int) input("birth_day");
        $sex = input("sex", 0);
        $invoice_code = input("invoice_code");
        $pc_code = input("pc_code");
        $tel = input("tel");
        $sms_code = input("sms_code");
        $provid = input("provid", 0);
        $cityid = input("cityid", 0);
        $areaid = input("areaid", 0);
        $postcode = input("postcode");
        $address = input("address");

        try {

            if(empty($fullname)) {
                throw new Exception("請輸入姓名");
            }

            if(mb_strlen($fullname)>100) {
                throw new Exception("姓名最多100位");
            }

            if(empty($birth_year)) {
                throw new Exception("請設定出生年");
            }

            if(empty($birth_month)) {
                throw new Exception("請設定出生月");
            }

            if(empty($birth_day)) {
                throw new Exception("請設定出生日");
            }

            $t = date("t", strtotime($birth_year."-".$birth_month."-01"));
            if($t<$birth_day) {
                throw new Exception("所選出生出生月只有".$t."天");
            }

            if(empty($sex)) {
                throw new Exception("請設定性別");
            }

            if(mb_strlen($invoice_code)>20) {
                throw new Exception("手機載具最多20位");
            }

            if(!empty($pc_code)) {
                if(mb_strlen($pc_code) != 16) {
                    throw new Exception("自然人憑證為16位");
                }

                if(!preg_match("/([a-zA-Z]{2}[0-9]{14})/",$pc_code)) {
                    throw new Exception("自然人憑證無效");
                }
            }

            if(mb_strlen($tel)>20) {
                throw new Exception("聯繫電話最多20位");
            }

            if(empty($provid)) {
                throw new Exception("請選擇國家或地區");
            }

            if(empty($cityid)) {
                throw new Exception("請選擇城市");
            }

            if(empty($areaid)) {
                throw new Exception("請選擇鄉鎮區域");
            }

            if(empty($postcode)) {
                throw new Exception("請輸入郵遞區號");
            }

            if(mb_strlen($postcode)>10) {
                throw new Exception("郵遞區號最多10位");
            }

            if(empty($address)) {
                throw new Exception("請輸入街道門牌地址");
            }

            if(mb_strlen($address)>255) {
                throw new Exception("街道門牌地址最多255位");
            }

            $savedata = [
                "fullname" => $fullname,
                "birth_year" => $birth_year,
                "birth_month" => $birth_month,
                "birth_day" => $birth_day,
                "sex" => $sex,
                "invoice_code" => $invoice_code,
                "pc_code" => $pc_code,
                "tel" => $tel,
				"mobile" => input('mobile'),
                "provid" => $provid,
                "cityid" => $cityid,
                "areaid" => $areaid,
                "postcode" => $postcode,
                "address" => $address,
            ];

            //檢測常用地址是否存在此地址，不存在則新增
            $addressRow = Db::name(CustomerAddress::$tablename)
                ->where("customerid", $this->getCustomerId())
                ->where("provid", $provid)
                ->where("cityid", $cityid)
                ->where("areaid", $areaid)
                ->where("address", $address)
                ->find();
            if(empty($addressRow)) {
                if(Db::name(CustomerAddress::$tablename)->where("customerid", $this->getCustomerId())->where("is_default", 1)->count()) {
                    $is_default = 0;
                } else {
                    $is_default = 1;
                }

                $customer = getLoginCustomer();

                $addressData = [
                    "customerid" => $this->getCustomerId(),
                    "fullname" => $fullname,
                    "tel" => $tel,
                    "mobile" => $customer["mobile"],
                    "provid" => $provid,
                    "cityid" => $cityid,
                    "areaid" => $areaid,
                    "address" => $address,
                    "postcode" => $postcode,
                    "is_default" => $is_default,
                ];
                if(false === Db::name(CustomerAddress::$tablename)->insert($addressData)) {
                    throw new Exception("儲存常用地址失敗");
                }
            }

            if(false === Db::name(CustModel::$tablename)->where("customerid", $this->getCustomerId())->update($savedata)) {
                throw new Exception("儲存變更失敗");
            }

            toJSON([
                "code" => 0,
                "msg" => "儲存成功"
            ]);

        } catch (Exception $ex) {
            toJSON([
                "code" => 1,
                "msg" => $ex->getMessage()
            ]);
        }
    }

    public function removeAddress()
    {
        try {
            $addrid = input("addrid", 0);
            if(empty($addrid)) {
                throw new Exception("請點擊刪除按鈕操作");
            }

            if(false === Db::name(CustomerAddress::$tablename)->where("addrid", $addrid)->where("customerid", $this->getCustomerId())->delete()) {
                throw new Exception("刪除失敗");
            }

            toJSON([
                "code" => 0,
                "msg" => "刪除成功"
            ]);
        } catch(Exception $ex) {
            toJSON([
                "code" => 1,
                "msg" => $ex->getMessage()
            ]);
        }
    }

    /**
     * save or update customer address
     * @throws \think\db\exception\DbException
     */
    public function saveAddress()
    {
        $addrid = input("addrid", 0);
        $fullname = input("fullname");
        $tel = input("tel");
        $mobile = input("mobile");
        $provid = input("provid", 0);
        $cityid = input("cityid", 0);
        $areaid = input("areaid", 0);
        $postcode = input("postcode");
        $address = input("address");
        $is_default = input("is_default", 0);

        try {

            if(empty($fullname)) {
                throw new Exception("請輸入姓名");
            }

            if(mb_strlen($fullname)>100) {
                throw new Exception("姓名最多100位");
            }

            if(empty($tel)) {
                throw new Exception("聯絡電話不能為空");
            }

            if(mb_strlen($tel)>20) {
                throw new Exception("聯繫電話最多20位元");
            }

            if(empty($mobile)) {
                throw new Exception("手機號碼不能為空");
            }

            if(mb_strlen($mobile)>20) {
                throw new Exception("手機號碼最多20位");
            }

            if(empty($provid)) {
                throw new Exception("請選擇國家或地區");
            }

            if(empty($cityid)) {
                throw new Exception("請選擇城市");
            }

            if(empty($areaid)) {
                throw new Exception("請選擇鄉鎮區域");
            }

            if(empty($postcode)) {
                throw new Exception("請輸入郵遞區號");
            }

            if(mb_strlen($postcode)>10) {
                throw new Exception("郵遞區號最多10位");
            }

            if(empty($address)) {
                throw new Exception("請輸入街道門牌地址");
            }

            if(mb_strlen($address)>255) {
                throw new Exception("街道門牌地址最多255位");
            }

            if($is_default) { //init default state
                if(false === Db::name(CustomerAddress::$tablename)->where("customerid", $this->getCustomerId())->update(["is_default" => 0])) {
                    throw new Exception("設置常用地址失敗");
                }
            }


            $savedata = [
                "fullname" => $fullname,
                "tel" => $tel,
                "mobile" => $mobile,
                "provid" => $provid,
                "cityid" => $cityid,
                "areaid" => $areaid,
                "postcode" => $postcode,
                "address" => $address,
                "is_default" => $is_default
            ];

            if($addrid) {
                if(false === Db::name(CustomerAddress::$tablename)->where("addrid", $addrid)->where("customerid", $this->getCustomerId())->update($savedata)) {
                    throw new Exception("儲存失敗");
                }
            } else {
                $savedata["customerid"] = $this->getCustomerId();
                if(false === Db::name(CustomerAddress::$tablename)->insert($savedata)) {
                    throw new Exception("儲存失敗");
                }
            }

            toJSON([
                "code" => 0,
                "msg" => "儲存成功"
            ]);

        } catch (Exception $ex) {
            toJSON([
                "code" => 1,
                "msg" => $ex->getMessage()
            ]);
        }
    }

    /**
     * send sms code
     * @return \think\response\Json
     */
    public function sendSmsCode()
    {
        try {
            $phone = input("phone");
            if (empty($phone)) {
                throw new Exception("手機號碼無效");
            }

            $code = rand(1000,9999);
            Session::set("smsphone", $phone);
            Session::set("smscode", $code);
            $msgid = sendSms($phone, "您的簡訊驗證碼為".$code.", 5分鐘有效");
            if($msgid<0) {
                throw new Exception("簡訊驗證碼發送失敗");
            }


            return json([
                "code" => 0,
                "msg" => "簡訊驗證碼發送成功"
            ]);
        } catch (Exception $ex) {
            return json([
                "code" => 1,
                "msg" => $ex->getMessage()
            ]);
        }
    }

    public function updatePhone()
    {
        try {
            $phone = input("phone");
            //$smscode = input("smscode");
            if (empty($phone)) {
                throw new Exception("手機號碼無效");
            }

            /*if (empty($smscode)) {
                throw new Exception("簡訊驗證碼無效");
            }

            if($phone != Session::get("smsphone")) {
                throw new Exception("手機號碼已變更");
            }

            if($smscode != Session::get("smscode")) {
                throw new Exception("簡訊驗證碼錯誤");
            }*/

            if(false === Db::name(CustModel::$tablename)->where("customerid", $this->getCustomerId())->update(["mobile" => $phone])) {
                throw new Exception("手機號變存儲失敗");
            }

            return json([
                "code" => 0,
                "msg" => "手機號存儲成功"
            ]);
        } catch (Exception $ex) {
            return json([
                "code" => 1,
                "msg" => $ex->getMessage()
            ]);
        }
    }

}
