<?php
namespace app\controller;

use app\models\Coupon;
use app\models\CouponCodeOrders;
use app\models\CouponCodes;
use app\models\CreditLog;
use app\models\CustomerAddress;
use app\models\Gift;
use app\models\Order;
use app\models\OrderGift;
use app\models\OrderProduct;
use app\models\Products;
use app\models\Promotion;
use app\models\VariationCombinations;
use app\models\AttrValue;
use think\Exception;
use think\facade\Db;
use think\facade\Session;
use think\facade\View;
use think\facade\Request;

class Checkout extends AuthBase
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $carts = Session::get("cart");
        if(empty($carts)) {
            header("location:".front_link("Cart/index"));exit;
        }

		$data['ref'] = input("ref");

        $totalItems = 0;
        $subTotal = 0;
        if(!empty($carts)) {
            foreach($carts as $cartId => $cart) {
                $totalItems += $cart["qty"];
                $subTotal += $cart["prodprice"]*$cart["qty"];
            }
        }

        $data["totalItems"] = $totalItems;
        $data["subTotal"] = $subTotal;
        $data["carts"] = $carts;
        $data["addresses"] = $this->getAddress();
        $data["coupons"] = $this->getCoupons($subTotal);
        $data["customer"] = $this->getCustomerInfo();
        $data["LogisticsType"] = Session::get("LogisticsType");

        $promotion = Promotion::getPromotion();
        $data["promotion_rules"] = $promotion["promotion_rules"];
        $data["total_sub_amount"] = $promotion["total_sub_amount"];
        $data["total_shipping_fee"] = $promotion["total_shipping_fee"];

        $config = get_setting();
        $setting = $config["setting"];
        $data["se_address"] = $setting["se"]['address']??'';
        $data["pay_tpyes"] = isset($setting["pay"]['types'])?$setting["pay"]['types']:[];
        View::assign($data);
        return View::fetch();
    }

    public function getCreditMoney()
    {
        try {
            $customer = $this->getCustomerInfo();
            $credits = (int) input("credits");
            if($customer["credits"]<$credits) {
                $credits = $customer["credits"];
            }
            $money = CreditLog::creditsToMoney($credits);
            toJSON([
                "code" => 0,
                "money" => $money
            ]);
        } catch (Exception $ex) {
            toJSON([
                "code" => 1,
                "msg" => $ex->getMessage()
            ]);
        }

    }

    public function checkCouponCode($isReturn=false, $code="")
    {
        try {
            if(empty($code)) {
                $code = input("code");
            }

            if(empty($code)) {
                throw new Exception("請輸入折扣碼");
            }

            $ccode = Db::name(CouponCodes::$tablename)->where("code", $code)->find();
            if(empty($ccode)) {
                throw new Exception("折扣碼無效");
            }

            if(!$ccode["state"]) {
                throw new Exception("折扣碼無效");
            }

            if(date("Ymd", $ccode["start_date"])>date("Ymd")) {
                throw new Exception("折扣碼未到有效期");
            }

            if(date("Ymd", $ccode["end_date"])<date("Ymd")) {
                throw new Exception("折扣碼已過有效期");
            }

            $order = Db::name(CouponCodeOrders::$tablename)->where("customerid", $this->getCustomerId())->where("code", $code)->find();
            if(!$ccode["is_reuse"] && !empty($order)) {
                throw new Exception("您已經使用過此折扣碼");
            }

            $payAmount = self::getPayAmount(true);
            if($ccode["total"]>$payAmount["payAmount"]) {
                $ccode_total = (int) $ccode["total"];
                throw new Exception("此折扣碼的最小訂購金額為".format_price($ccode_total));
            }

            $data = ["code" => 0, "msg" => "折扣碼有效"];
            if($isReturn) {
                return $data;
            }

            toJSON($data);
        } catch (Exception $e) {
            $data = ["code" => 1, "msg" => $e->getMessage()];
            if($isReturn) {
                return $data;
            }
            toJSON($data);
        }
    }

    public function getPayAmount($retArray=false)
    {
        try {
            $customer = $this->getCustomerInfo();
            $credits = (int)input("credits");
            $coupon_code = input("coupon_code");
            $logisticstype = input("logisticstype", 0);
            $pay_type = (int)input("pay_type");
            $code = input("code");

            if ($customer["credits"] < $credits) {
                $credits = $customer["credits"];
            }
            $money = CreditLog::creditsToMoney($credits);
            $options["logisticstype"] = $logisticstype;
            $options["pay_type"] = $pay_type;
            $options["code"] = $code;
            $options["coupon_code"] = $coupon_code;
            $promotions = Promotion::getPromotion($options);

            $cart_total_amount = $promotions["cart_total_amount"];
            $total_shipping_fee = $promotions["total_shipping_fee"];
            $total_sub_amount = $promotions["total_sub_amount"];
            $couponAmount = 0;

            $payAmount = $cart_total_amount + $total_shipping_fee - $total_sub_amount - $money - $couponAmount;
            $total_item_amount = $cart_total_amount - $total_sub_amount - $couponAmount - $money;
            if ($total_shipping_fee > 0) {
                $total_item_amount += $total_shipping_fee;
            }

            $promotionList = View::fetch("promotion_list", $promotions);
            $data = [
                "payAmount" => $payAmount,
            ];

            if ($retArray) {
                return $data;
            }

            $data["promotionList"] = $promotionList;
            $data["getCredits"] = CreditLog::orderToCredit($total_item_amount);
            toJSON($data);
        } catch(Exception $ex) {
            toJSON([
                "code" => 0,
                "msg" => $ex->getMessage()
            ]);
        }
    }

    /**
     * make order
     */
    public function makeOrder()
    {

        try {
            $carts = Session::get("cart");
            if(empty($carts)) {
                throw new Exception("購物車空空如也");
            }

            $addrid = Request::instance()->param("addrid");
            if(empty($addrid)) {
                throw new Exception("請選擇收貨人資訊");
            }

            $myaddress = Db::name(CustomerAddress::$tablename)->where("customerid", $this->getCustomerId())->where("addrid", $addrid)->find();
            if(empty($myaddress)) {
                throw new Exception("您選擇的收貨人資訊無效");
            }

            $shipping_name = $myaddress["fullname"];
            $shipping_mobile = $myaddress["mobile"];
            $shipping_tel1 = $myaddress["tel"];
            $shipping_city = GetCountryName($myaddress["cityid"]);
            $shipping_area = GetCountryName($myaddress["areaid"]);
            $shipping_address = $myaddress["address"];
            $shipping_zipcode = $myaddress["postcode"];

            $invoice_type = Request::instance()->param("invoice_type");
            $invoice_header = Request::instance()->param("invoice_header");
            $invoice_zaiju = input("invoice_zaiju");
            $invoice_no = Request::instance()->param("invoice_no");
            $invoice_email = Request::instance()->param("invoice_email");
            $donate_to = input("donate_to");

            $pay_type = Request::instance()->param("pay_type");

            $credits = (int) input("credits");
            $giftid = (int) input("giftid", 0);
            $coupon_code = input("coupon_code");
            $code = input("code"); //折扣碼

            $LogisticsType = Request::instance()->param("LogisticsType");
            $LogisticsSubType = Request::instance()->param("LogisticsSubType");
            $CVSStoreName = Request::instance()->param("CVSStoreName");
            $CVSAddress = Request::instance()->param("CVSAddress");
            $CVSStoreID = Request::instance()->param("CVSStoreID");
            $CVSTelephone = Request::instance()->param("CVSTelephone");
			$ordnote = Request::instance()->param("ordnote");

			if(!empty($code)) {
			  $ret = self::checkCouponCode(true, $code);
			  if($ret["code"]>0) {
			      throw new Exception($ret["msg"]);
              }
            }

            if(empty($shipping_name)) {
                throw new Exception("收貨人姓名未填寫", 1004);
            }

            if(empty($shipping_mobile)) {
                throw new Exception("收貨人行動電話未填寫", 1004);
            }

            if(empty($shipping_zipcode)) {
                throw new Exception("郵遞區號不能為空");
            }

            if(empty($LogisticsType)) {
                throw new Exception("物流類型未選擇");
            }

			if($LogisticsType != "SE" && empty($LogisticsSubType)) {
                    throw new Exception("物流子類型未選擇");
            }

            if($LogisticsType=="CVS") {
                if(empty($CVSStoreName)) {
                    throw new Exception("超商門市名稱不能為空", 1004);
                }

                if(empty($CVSStoreID)) {
                    throw new Exception("超商門市編號不能為空", 1004);
                }

                if(empty($CVSAddress)) {
                    throw new Exception("超商門市地址不能為空", 1004);
                }
            }


            if(empty($invoice_type)) {
                throw new Exception("發票類型未選擇", 1004);
            }

            if($invoice_type==3) {
                if(empty($invoice_header)) {
                    throw new Exception("發票抬頭未填寫", 1004);
                }

                if(empty($invoice_no)) {
                    throw new Exception("發票統一編號未填寫", 1004);
                }
            }

            $wuliuPaytypes = get_wuliu_paytypes();
            if(!isset($wuliuPaytypes[$LogisticsType])) {
                throw new Exception("選擇的配置方式無效");
            }

            if(!in_array($pay_type, $wuliuPaytypes[$LogisticsType])) {
                throw new Exception("您選擇的配送方式與選擇的支付方式不匹配");
            }

            //promotion calc
            $options["logisticstype"] = $LogisticsType;
            $options["pay_type"] = $pay_type;
            $options["code"] = $code;
            $promotion = Promotion::getPromotion($options);
            $cart_total_amount = $promotion["cart_total_amount"];
            $total_shipping_fee = $promotion["total_shipping_fee"];
            $promotion_rules = $promotion["promotion_rules"];
            $total_sub_amount = $promotion["total_sub_amount"];
			$hasSubShippingFee = $promotion["hasSubShippingFee"];

            $hasGift = false;
            if(!empty($promotion_rules)) {
                foreach($promotion_rules as $k => $promotionRule) {
                    if(!empty($promotionRule["gifts"])) {
                        $hasGift = true;
                    }
                }
            }

            if($giftid && !$hasGift) {
                throw new Exception("您的購物金額未達到贈品條件");
            }

            $coupon_amount = 0;
            if(!empty($coupon_code)) {
                $coupon = Db::name(Coupon::$tablename)
                    ->where("code", $coupon_code)
                    ->where("customerid", $this->getCustomerId())
                    ->where("state", 1)
                    ->where("has_used", 0)
                    ->find();
                if(empty($coupon)) {
                    throw new Exception("優惠券無效");
                }
                if($coupon["start_time"]>time() || $coupon["end_time"]<time()) {
                    throw new Exception("優惠券不在有效期內");
                }
                if($cart_total_amount<$coupon["min_amount"]) {
                    throw new Exception("優惠券最低消費金額為".$coupon["min_amount"]);
                }

                $coupon_amount = $coupon["amount"];
            }

            $oid = date("ymdHis").rand(1000,9999); //make order oid

            Db::startTrans();

            $invoice_types = invoice_type();

            $customer =  $this->getCustomerInfo();

            if($credits>0 && $credits>$customer["credits"]) {
                throw new Exception("紅利點數不足");
            }

            $creditMoney = CreditLog::creditsToMoney($credits);


            $total_amount = $cart_total_amount+$total_shipping_fee-$total_sub_amount-$coupon_amount;

            if($creditMoney>$total_amount) {
                throw new Exception("抵扣金額不能大於訂單總額");
            }

            if(($total_amount-$creditMoney)>0) {
                if(empty($pay_type)) {
                    throw new Exception("付款方式未選擇", 1004);
                }
            } else {
                $pay_type = "-1";
            }

            //支付金額
            $total_amount -= $creditMoney; //sub all fees

            $total_item_amount = $cart_total_amount-$total_sub_amount-$coupon_amount-$creditMoney;
            if($total_shipping_fee>0 && $hasSubShippingFee) { //如果運費減免了則需要加上，否則不需要加
                $total_item_amount += $total_shipping_fee;
            }


            $getCredits = 0;
            if($total_item_amount>0) {
                $getCredits = CreditLog::orderToCredit($total_item_amount);
            }

            if($invoice_type == 2) {
                $invoice_header = '';
                $invoice_no = '';
            } else {
                if(empty($invoice_header) || empty($invoice_no)) {
                    throw new Exception("三聯式發票需要填寫發票抬頭和統一編號");
                }
            }

			if(mb_strlen($ordnote)>1000) {
				throw new Exception("訂單備註最多1000字符");
			}

            //插入訂單
            $order_data = [
                "oid" => $oid,
                "payoid" => $oid."V1",
                "customerid" => $this->getCustomerId(),
                "sub_total_amount" => $cart_total_amount,
                "shipping_fee" => $total_shipping_fee,
                "coupon_amount" => $coupon_amount,
                "coupon_code" => $coupon_code,
                "promotion_rules" => json_encode($promotion_rules, JSON_UNESCAPED_UNICODE),
                "promotion_amount" => $total_sub_amount,
                "credits" => $credits,
                "credit_money" => $creditMoney,
                "total_item_amount" => $total_item_amount,
                "order_credits" => $getCredits,
                "total_amount" => $total_amount,

                "billing_name" => $customer["fullname"],
                "billing_mobile" => $customer["mobile"],
                "billing_tel1" => $customer["tel"],
                "billing_email" => $customer["custconemail"],

                "shipping_name" => $shipping_name,
                "shipping_mobile" => $shipping_mobile,
                "shipping_tel1" => $shipping_tel1,
                "shipping_city" => $shipping_city,
                "shipping_area" => $shipping_area,
                "shipping_address" => $shipping_address,
                "shipping_zipcode" => $shipping_zipcode,

                "LogisticsType" => $LogisticsType,
                "LogisticsSubType" => $LogisticsSubType,
                "CVSStoreID" => $CVSStoreID,
                "CVSStoreName" => $CVSStoreName,
                "CVSTelephone" => $CVSTelephone,
                "CVSAddress" => $CVSAddress,

                "invoice_email" => $invoice_email,
                "invoice_type" => $invoice_types[$invoice_type],
                "invoice_header" => $invoice_header,
                "invoice_no" => $invoice_no,
                "invoice_zaiju" => $invoice_zaiju,
                "donate_to" => $invoice_type==3?0:$donate_to,
                "pay_type" => $pay_type,
				"ordnote" => $ordnote,
                "update_date" => time(),
                "create_date" => time(),
            ];

            if($order_data["total_amount"]==$order_data["credits"]) {
                $order_data["pay_status"] = 1;
                $order_data["order_status"] = 1;
            }

            $oid = Db::name(Order::$tablename)->insertGetId($order_data);
            if(!$oid) {
                throw new Exception("下單失敗", 1003);
            }

            if($credits>0) {
                \app\models\Customer::changeCredits($this->getCustomerId(), -$credits, $oid, "線上購物抵扣");
            }

            if(!empty($code)) {
                $ccode = Db::name(CouponCodes::$tablename)
                    ->where("code", $code)
                    ->where("state", 1)
                    ->find();
                if(!empty($ccode)) {
                    $ccorder = [
                        "customerid" => $this->getCustomerId(),
                        "oid" => $oid,
                        "total_item_amount" => $total_item_amount,
                        "total_amount" => $total_amount,
                        "code" => $code,
                        "title" => $ccode["title"]."(".$code.")",
                        "ptype" => $ccode["ptype"],
                        "total" => $ccode["total"],
                        "sub_total" => $ccode["sub_total"],
                        "start_date" => $ccode["start_date"],
                        "end_date" => $ccode["end_date"],
                        "is_reuse" => $ccode["is_reuse"],
                        "create_time" => time()
                    ];
                    if(!Db::name(CouponCodeOrders::$tablename)->insert($ccorder)) {
                        throw new Exception("訂單下單失敗，請重新下單");
                    }
                }
            }

            //入庫產品
            $qtys = [];
            $prodSold = [];
            foreach($carts as $cartid => $row) {
                $prod = Db::name(Products::$tablename)->where("prodid", $row["prodid"])->where("state", 1)->find();
                if(empty($prod)) {
                    throw new Exception("產品：".$row["prodname"]."已下架", 10041);
                }

                if(empty($row["voptions"])) {
                    $qtys[] = [
                        "prodid" => $row["prodid"],
                        "prodname" => $row["prodname"],
                        "combinId" => 0,
                        "qty" => $row["qty"]
                    ];

					if($prod['prod_price'] != $row["prodprice"]) {
						throw new Exception("產品：".$row["prodname"]."價格已更新，請將產品移出購物車，併重新加入", 10041); 	
					}

					if($prod['stock'] < $row["qty"]) {
						throw new Exception("產品：".$row["prodname"]."庫存不足, 您最多可以購買".$prod['stock']."件", 10041); 	
					}

					if($prod['prodcode'] != $row["prodcode"]) {
						$row["prodcode"] = $prod['prodcode'];
					}

                    if($row["prodprice"]<=0) {
                        throw new Exception("產品：".$row["prodname"]."售價必須大於0，請從購物移除重新加入");
                    }
                } else {
                    $qtys[] = [
                        "prodid" => $row["prodid"],
                        "prodname" => $row["prodname"],
                        "combinId" => $row["combinId"],
                        "qty" => $row["qty"]
                    ];
					
					$optionnames = [];
					foreach($row["voptions"] as $vk => $vv) {
						$optionnames[] = $vv['attrname'].":".$vv['valuename'];
					}

					$optionStr = implode(",",$optionnames);

					//check price, stock
					$xprod = Db::name(VariationCombinations::$tablename)->where("vcproductid", $row["prodid"])->where("combinationid",$row["combinId"])->where('vcenabled', 1)->find();
					if(empty($xprod)) {
						throw new Exception("產品：".$row["prodname"]."所選規格[".$optionStr."]已下架", 10041); 	
					}


					if($xprod['vcprice'] != $row["prodprice"]) {
						throw new Exception("產品：".$row["prodname"]."所選規格[".$optionStr."]價格已更新，請將產品移出購物車，併重新加入", 10041); 	
					}

					if($xprod['vcstock'] < $row["qty"]) {
						throw new Exception("產品：".$row["prodname"]."所選規格[".$optionStr."]庫存不足, 您最多可以購買".$xprod['vcstock']."件", 10041);
					}

					if($xprod['vcsku'] != $row["prodcode"]) {
					    if(!empty($xprod['vcsku'])) {
                            $row["prodcode"] = $xprod['vcsku'];
                        } else {
                            $row["prodcode"] = $prod['prodcode'];
                        }
					}

                    if($row["prodprice"]<=0) {
                        throw new Exception("產品：".$row["prodname"]."所選規格[".$optionStr."]售價必須大於0，請從購物移除重新加入");
                    }
                }

				$order_products[] = [
                    "oid" => $oid,
                    "prodid" => $row["prodid"],
                    "sku" => $row["prodcode"],
                    "prodimage" => $row["prodimage"],
                    "prodname" => $row["prodname"],
                    "options" => json_encode($row["voptions"]),
                    "qty" => $row["qty"],
                    "prod_price" => $row["prodprice"],
                    "total_amount" => bcmul($row["prodprice"], $row["qty"]),
                    "create_date" => time(),
                ];

                if(!isset($prodSold[$row["prodid"]])) {
                    $prodSold[$row["prodid"]] = 0;
                }

                $prodSold[$row["prodid"]] += $row["qty"];
            }

            if(empty($order_products)) {
                throw new Exception("購物車為空", 1005);
            }

            if(!Db::name("order_products")->insertAll($order_products)) {
                throw new Exception("產品入庫失敗", 1006);
            }

            //如果有優惠券則執行更新
            if(!empty($coupon_code)) {
                if(Db::name(Coupon::$tablename)->where("customerid", $this->getCustomerId())->where("code", $coupon_code)->where("has_used", 1)->count()) {
                    throw new Exception("折價券已使用", 1006);
                }

                $coupon_data = [
                    "has_used" => 1,
                    "used_date" => time(),
                ];
                if(!Db::name(Coupon::$tablename)->where("customerid", $this->getCustomerId())->where("code", $coupon_code)->update($coupon_data)) {
                    throw new Exception("折價券已使用", 1006);
                }
            }



            if(($total_amount-$creditMoney)>0) {
                $pay_types = get_pay_types();

                if($total_amount<$pay_types[$pay_type]["min_amount"] || $total_amount>$pay_types[$pay_type]["max_amount"]) {
                    throw new Exception("付款金額必須介於".$pay_types[$pay_type]["min_amount"]."元至".$pay_types[$pay_type]["max_amount"]."元之間");
                }
            }

            //產品數量更新
            if(!empty($qtys)) {
                foreach($qtys as $row) {
                    if($row["combinId"]>0) { //update voptions
                        if(!Db::name(VariationCombinations::$tablename)->where("vcproductid", $row["prodid"])->where("vcstock>=".$row["qty"])->where("combinationid", $row["combinId"])->dec("vcstock", $row["qty"])->update()) {
                            $vcoptionids = Db::name(VariationCombinations::$tablename)->where("vcproductid", $row["prodid"])->where("combinationid", $row["combinId"])->value("vcoptionids");
							$_vcoptionids = explode(",",$vcoptionids);
							$list = Db::name(AttrValue::$tablename)->where("valueid", "IN", $_vcoptionids)->orderRaw("FIELD(valueid, ".$vcoptionids.")")->select();
							$attrNames = [];
							if(!empty($list)) {
								foreach($list as $v) {
									$attrNames[] = $v['name'];
								}
							}
							throw new Exception("商品[".$row["prodname"]."(".implode(", ", $attrNames).")]庫存量不足，請與客服聯絡！");
                        }
                    } else {
                        if(!Db::name(Products::$tablename)->where("prodid", $row["prodid"])->where("stock>=".$row["qty"])->dec("stock", $row["qty"])->update()) {
                            throw new Exception("商品[".$row["prodname"]."]庫存量不足，請與客服聯絡！");
                        }
                    }
                }
            }

            //購買數量記錄到產品表
            if(!empty($prodSold)) {
                foreach($prodSold as $prodid => $qty) {
                    Db::name(Products::$tablename)->where("prodid", $prodid)->inc("sold_qty", $qty)->update();
                }
            }

            //贈品入庫
            if($giftid>0) {
                $gift = Db::name(Gift::$tablename)->where("giftid", $giftid)->where("state", 1)->where("stock", ">", 0)->find();
                if(empty($gift)) {
                    throw new Exception("您挑選的贈品已被領取完了,請刷新頁面選擇");
                }

                $giftdata = [
                    "oid" => $oid,
                    "sku" => $gift["sku"],
                    "prodname" => $gift["prodname"],
                    "thumb_image" => $gift["thumb_image"]
                ];

                if(false === Db::name(OrderGift::$tablename)->insert($giftdata)) {
                    throw new Exception("贈品儲存失敗");
                }

                if(false === Db::name(Gift::$tablename)->where("giftid", $giftid)->where("stock", ">", 0)->dec("stock", 1)->update()) {
                    throw new Exception("贈品庫存變更失敗");
                }

            }

            //提交事務
            Db::commit();

            send_order_email($oid);
			send_order_notify('ordercreate', $oid, "訂單成立");
            Session::delete("cart");
            return json(["code" => 0, "oid" => $oid, "url" => front_link("Checkout/pay", ["payoid" => $order_data["payoid"]]), "msg" => "訂單送出成功"]);
        } catch(Exception $e) {
            Db::rollback();
            return json(["code" => 1, "msg" => $e->getMessage()]);
        }
    }

    public function pay()
    {
        try {
            $payoid = input("payoid");
            $order = Db::name(Order::$tablename)->where("payoid", $payoid)->find();
            if(in_array($order["pay_type"], [20,100, 105])) {
                header("location: ".front_link("Checkout/order_finish", ["payoid" => $payoid])); exit;
            }
            //根據付款方式跳轉
            $pay_types = get_pay_types();
            if(!isset($pay_types[$order["pay_type"]])) {
                throw new Exception("未定義付款方式");
            }

            $pay = $pay_types[$order["pay_type"]];
            $order["items"] =  Db::name(OrderProduct::$tablename)->where("oid", $order["oid"])->select();

            switch($pay["type"]) {
                case "atm": //ATM
                {
                    (new \ecpay\ECPay())->ATM($order);
                    break;
                }
                case "credit": //信用卡
                {
                    (new \ecpay\ECPay())->credit($order, $pay["fenqi"]);
                    break;
                }
                default:
                {
                    (new \ecpay\ECPay())->ALL($order);
                    break;
                    //throw new Exception("未知付款類型");
                }
            }
        }catch(Exception $e) {
            exit($e->getMessage());
        }
    }

    public function repay()
    {
        try {
            Db::startTrans();
            $oid = Request::instance()->param("oid");
            $_payoid = Db::name(Order::$tablename)->where("oid", $oid)->value("payoid");
            $strArr = explode("V", $_payoid);
            $nowVersion = (int) isset($strArr[1])?$strArr[1]:0;
            $payoid = $oid."V".($nowVersion+1);
            $data = [
                "payoid" => $payoid,
                "update_date" => time(),
            ];
            if(!Db::name(Order::$tablename)->where("oid", $oid)->update($data)) {
                throw new Exception("無法跳轉去付款");
            }

            Db::commit();
            header("location: ".front_link("Checkout/pay", ["payoid" => $payoid])); exit;
        } catch(\Exception $e) {
            Db::rollback();
            exit($e->getMessage());
        }
    }

    public function order_finish()
    {
        $payoid = input("payoid");
        try {
            if (empty($payoid)) {
                throw new Exception("訂單無效");
            }

            $order = Db::name(Order::$tablename)->where("customerid", $this->getCustomerId())->where("payoid", $payoid)->find();

            if(empty($order)) {
                throw new Exception("訂單不存在");
            }

            $data["pay_types"] = get_pay_types();
            $data["order"] = $order;
            View::assign($data);
            return View::fetch();
        } catch (Exception $ex) {
            abort(404);
        }
    }

    public function getAddress()
    {
        return Db::name(CustomerAddress::$tablename)->where("customerid", $this->getCustomerId())->order("is_default DESC")->select();
    }

    public function getCoupons($orderAmount=0)
    {
        $map = [];
        $map[] = ["customerid", "=", $this->getCustomerId()];
        $map[] = ["state", "=", 1];
        $map[] = ["has_used", "=", 0];
        $map[] = ["min_amount", "<=", $orderAmount];
        $map[] = ["start_time", "<=", time()];
        $map[] = ["end_time", ">", time()];
        return Db::name(Coupon::$tablename)->where($map)->order("amount DESC")->select();
    }

    public function getAddressById()
    {
        $addrid = (int) input("addrid", 0);
        $row = Db::name(CustomerAddress::$tablename)->where("customerid", $this->getCustomerId())->where("addrid", $addrid)->find();
        return toJSON($row);
    }

}
