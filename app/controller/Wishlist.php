<?php
namespace app\controller;

use app\models\Attris;
use app\models\AttrValue;
use app\models\ProductImages;
use app\models\Products;
use think\Exception;
use think\facade\Db;
use app\models\Wishlist as WlModel;
use think\facade\View;

class Wishlist extends AuthBase
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $query = Db::table(config("database.prefix").Products::$tablename)->alias("p")
            ->join(config("database.prefix").WlModel::$tablename." wl", "wl.prodid=p.prodid")
            ->where("wl.customerid", $this->getCustomerId())
            ->field("p.*")
            ->paginate(20);
        $list = $query->all();
        $images = [];
        $vos = [];
        if(!empty($list)) {
            $prodIds = [];
            $voids = [];
            foreach ($list as $v) {
                $prodIds[] = $v["prodid"];
                if($v["void"]) {
                    $voids[] = $v["void"];
                }
            }
            $images = ProductImages::getMainImagesByProdid($prodIds);

            //get the second image
            $_images2 = Db::name(ProductImages::$tablename)->where("productid", "IN", $prodIds)->where("is_main", 0)->where("sortorder", 2)->select();
            if(!empty($_images2)) {
                foreach ($_images2 as $image) {
                    $images2[$image["productid"]]["image_thumb"] = $image["image_thumb"];
                }
            }

            $vos= self::countAttrs($voids);
        }
        $data["list"] = $list;
        $data["images"] = $images;
        $data["images2"] = isset($images2)?$images2:[];
        $data["vos"] = $vos;
        $data["totalItems"] = $query->total();
        $data["pages"] = \app\extend\Page::make($query->currentPage(), $query->lastPage());
        View::assign($data);
        return View::fetch("index");
    }

    public function countAttrs($voids=[])
    {
        if(empty($voids)) return;
        $list = Db::table(config("database.prefix").Attris::$tablename)->alias("a")
            ->join(config("database.prefix").AttrValue::$tablename." av", "av.attrid=a.attrid AND a.attrtype IN('color', 'image')")
            ->where("a.void", "IN", $voids)
            ->field("void, COUNT(valueid) AS t")
            ->group("void")
            ->select();

        $vos = [];
        if(!empty($list)) {
            foreach($list as $v) {
                $vos[$v["void"]] = $v["t"];
            }
        }
        return $vos;
    }

    public function add()
    {
        try {

            $prodid = input("prodid", 0);
            if(empty($prodid)) {
                throw new Exception("追蹤商品無效");
            }

            if(!Db::name(Products::$tablename)->where("prodid", $prodid)->count()) {
                throw new Exception("追蹤商品不存在");
            }

            $savedata = [
                "customerid" => $this->getCustomerId(),
                "prodid" => $prodid
            ];

            //if has wished, then remove it
            if(Db::name(WlModel::$tablename)->where($savedata)->count()) {
                if(false === Db::name(WlModel::$tablename)->where($savedata)->delete()) {
                    throw new Exception("移除追蹤失敗");
                }
                $msg = "移除追蹤成功";
                $active = "";
            } else {
                if (false === Db::name(WlModel::$tablename)->insert($savedata)) {
                    throw new Exception("加入追蹤失敗");
                }
                $msg = "加入追蹤成功";
                $active = "-active";
            }

            toJSON([
                "code" => 0,
                "msg" => $msg,
                "active_class" => $active
            ]);
        } catch (Exception $ex) {
            toJSON([
                "code" => 1,
                "msg" => $ex->getMessage()
            ]);
        }
    }

    /**
     * remove wishlist items
     * @throws \think\db\exception\DbException
     */
    public function remove()
    {
        try {

            $prodid = input("prodid", 0);
            if(empty($prodid)) {
                throw new Exception("追蹤商品無效");
            }

            $where = [
                "customerid" => $this->getCustomerId(),
                "prodid" => $prodid
            ];

            if(!Db::name(WlModel::$tablename)->where($where)->count()) {
                throw new Exception("您已移除追蹤");
            }

            if(false === Db::name(WlModel::$tablename)->where($where)->delete()) {
                throw new Exception("移除追蹤失敗");
            }

            toJSON([
                "code" => 0,
                "msg" => "移除追蹤成功"
            ]);
        } catch (Exception $ex) {
            toJSON([
                "code" => 1,
                "msg" => $ex->getMessage()
            ]);
        }
    }
}
